呂文楷 R10725035


謝謝老師，我好喜歡這堂課。我覺得這是我大學以來最好的一堂課。
我覺得這堂課有以下幾個優點，以及我為什麼喜歡：
1. 內容本身：上完這堂課，我驚覺我以前寫的程式根本都是亂寫。有了老師教的這些基礎，以期這學期的訓練，我現在有辦法看程式碼了，也有 design pattern 初步的概念，對於如何把程式寫好也開始有一些方向了。
2. 人數少：這堂課的人數偏少，很慶幸我這學期能選到這堂課，但也因為人少，所以老師可以給大家比較多的回饋。
3. 小組討論：我覺得這是這堂課很厲害的地方，每次作業都可以在小組討論中，從不同的看法去設計程式架構，也理解到每個人對於 design pattern 的詮釋方向皆不同，每次討論都會有很多收穫。
4. 上課練習：老師上課後講完一個 pattern，就會讓我們去練習，我覺得這是一個很好的模式，剛學完馬上應用，記憶會變得更加深刻。
5. Trace code：這是我第一次花大量的時間去看 source code，我覺得這個時間花得很直得。我負責 eureka 的部分，也發現原來一個 service registry 其實會需要處理超多問題，我也很佩服寫出這些程式碼的人，他們真的好厲害，期許我自己有一天也能寫出這樣好看且有用的程式碼。
6. 老師的回饋：謝謝老師願意花大量的時間與精力去跟我們說我們每一組報告的問題，雖然我上課當下常常聽不懂，但是回去多想幾次後，常常有豁然開朗的感覺，還好有老師的提點，不然我會一直抱有錯誤的觀念。

以下是我花了一點時間才開始習慣的地方：
1. 小組討論：初期討論 design pattern我真的不知道我在幹嘛，直到後來我把 gof 關於 design pattern 的部分看完，才有辦法在討論中產生一些關於 design pattern 的論點。我必須很慚愧的說，作業的 bridge pattern、iterator pattern 和 decorator pattern 這三次我們其實用老師的 process 做不出來好的 refactor design，是去翻書有了一部分概念後，才有辦法套用 design pattern，我覺得我可能還要更多的練習才能熟悉的應用老師的 process 來產生 design pattern。
2. Trace code：學期剛開始有好幾個禮拜都不知道在看什麼，一個 pattern 都看不出來，我大概看了 5000 行後，（也可能是老師教了比較多後），才有辦法開始看出 pattern，這時往回看也才發現過去沒有看到的 pattern。我其實到最後一個禮拜，才發現 eureka 厲害的地方是在於他的分散式架構以及availability， 我之前有點抓錯重點了。
3. 上課時間：早八對我有點太早了，我有時候會不小心睡過頭，每次都很後悔，但後來請同學叫我起床後，就沒這個問題了。
4. 作業難度：作業的 spec 很單純，很多時候我們花了很多時間來想像這個題目的應用場景，但有時候想錯了，就會導致結果偏差，也就是可以完成 spec 上的東西，但實際解決的問題並不是題目要我們解決的，希望作業可以有更詳細的 spec，或是複雜一點，讓我們可以比較好去體會 design pattern 的問題。像是期中考的複雜程度，就讓我們發現 COR 的好處，尤其是當我們這組後來又重新寫了一次後。
5. DevOps：Devops 很重要，但我覺得這堂課可以不用報告 devops，把時間拿來練習更多 design pattern，因為網路上已經有很多資源，或是去實習工作後，就可以更實際的操作到這些流程與架構。
6. 希望有18週。


蔡祐琳 R10725045
這門課讓我獲益良多，使我更了解要怎麼做出好的物件導向的架構，提升code的可維護性及可擴展性。此外，在trace code的時候，透過觀摩別人的code，讓我開始思考，如果我來寫的話，哪邊會有差異，原本的開發者是考慮了什麼問題，所以做出這樣的設計等等，這讓我未來在寫程式的時候可以思考的更全面。
在課程設計上，大致而言我覺得都很棒，但建議最一開始的軟體開發流程跟WBS只要合成一周來上就好，設計模式的部分希望可以多一到二堂課。一方面是因為我覺得還有很多重要的設計模式還沒有教到，如adapter、visitor等等，雖然自己看也可以，但老師教可以讓我更理解這個pattern是想解決什麼問題、擴展性是用在哪方面等等。另一方面，剛開始上design pattern的時候還是一片混亂、用老師的design process也還沒這麼順手，等到稍微上軌道的時候，課程也差不多結束了，覺得還差一點就可以融會貫通了，甚至有點意猶未盡。
總而言之，這是一堂收穫豐富的課，謝謝老師的用心指教。

王敬順 R11922130


郭政維 R11922144


邱承之 R09922a22
